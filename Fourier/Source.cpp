#include <iostream>
#include <algorithm>
#include "DFT.hpp"
int main(void) {
	std::vector<double> s0{ -.8660254040, .3214394654, .9914448614, .6540312923e-1,
							-.9659258263, -.4422886902, .7933533404, .7518398075,
							-.5000000000, -.9469301295, .1305261922, .9978589232,
							.2588190451, -.8968727415, -.6087614290, .6593458152,
							.8660254040, -.3214394654, -.9914448614, -.6540312923e-1,
							.9659258263, .4422886902, -.7933533404, -.7518398075,
							.5000000000, .9469301295, -.1305261922, -.9978589232,
							-.2588190451, .8968727415, .6087614290, -.6593458152 };
	for (int i = 0; i < s0.size(); ++i) {
		//s0[i] *= 1024;
	}
	std::vector<int> s(s0.begin(), s0.end());
	std::vector<ComplexNumber> a = FourierTransform(s0, 32);
	for (int i = 0; i < a.size(); ++i)
		std::cout
	//	<< a[i].get_real_v() <<
	//	", "
	//	<< a[i].get_imag_v() <<
		//"i\n";
	//	"\t"
		<< a[i].getPhase() <<
		"\n";
	return 0;
}